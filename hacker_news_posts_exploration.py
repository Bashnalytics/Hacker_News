# -*- coding: utf-8 -*-
"""Hacker News Posts Exploration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mxA7SxeMhdJA_JHXPSLSvzIzWeoVaHPE

**Hacker News Posts Data Exploration**

*This is a data exploration of the different posts on Hacker News, to determine the different types/classes of posts and the number of comments on such posts.*

*Also, to estimate the best time of the day to post on Hacker News to get a response from the community.*
"""

from csv import reader
from datetime import *

"""**Functions**"""

def open_dataset(file_name):
    
    opened_file = open(file_name)
    from csv import reader
    read_file = reader(opened_file)
    data = list(read_file)
    
    return data

def explore_data(dataset, start, end, rows_and_columns=False):
    dataset_slice = dataset[start:end]    
    for row in dataset_slice:
        print(row)
        print('\n') # adds a new (empty) line after each row

    if rows_and_columns:
        print('Number of rows:', len(dataset))
        print('Number of columns:', len(dataset[0]))

"""**To read the file into my notebook and explore:**"""

hn = open_dataset("/content/HN_posts_year_to_Sep_26_2016.csv")
hn_header = hn[0]
hn = hn[1:]

print(hn_header)
explore_data(hn,0,5,True)

"""**Segmenting posts with comments from those with none:**"""

hn_no_comments = []
hn_comments = []
for post in hn:
  comment = post[4]
  if comment == "0":
    hn_no_comments.append(post)
  else:
    hn_comments.append(post)
explore_data(hn_no_comments, 0, 4, True)
explore_data(hn_comments, 0, 4, True)

"""*This leaves us with 80401 rows out of 293119 for posts with comments.*

**Segmenting the posts with comments into three buckets: Ask HN (posts with Ask HN at the start of the post), Show HN (posts with Ask HN at the start of the post) and other posts.**
"""

ask_posts = []
show_posts = []
other_posts = []

for post in hn_comments:
  title = post[1]
  if title.lower().startswith('ask hn'):
    ask_posts.append(post)
  elif title.lower().startswith('show hn'):
    show_posts.append(post)
  else:
    other_posts.append(post)

explore_data(ask_posts, 0, 3, True)
explore_data(show_posts, 0, 3, True)
explore_data(other_posts, 0, 3, True)

"""We have **6,911 posts** asking the Hacker News community a specific question.

We have **5,059 posts** showing the Hacker News community a project, product, or just generally something interesting.

We have **68,431 posts** on others.

**Average number of Comments for Ask HN and Show HN**
"""

total_ask_comments = 0
for post in ask_posts:
  num_comments = int(post[4])
  total_ask_comments += num_comments
avg_ask_comments = total_ask_comments / len(ask_posts)
print(total_ask_comments)
print(len(ask_posts))
print(avg_ask_comments)

total_show_comments = 0
for post in show_posts:
  num_comments = int(post[4])
  total_show_comments += num_comments
avg_show_comments = total_show_comments / len(show_posts)
print(total_show_comments)
print(len(show_posts))
print(avg_show_comments)

"""*The average number of comments under the Ask HN posts is approximately 14 comments, which is higher than the the average number of comments under the Show HN posts (approximately 10 comments)*

**Volume of Ask HN posts and comments by the hour they were created**
"""

result_list = []
for post in ask_posts:
  time_created = post[6]
  num_comments = int(post[4])
  result_list.append([time_created, num_comments])
print(result_list[:4])

counts_by_hour = {}
comments_by_hour = {}
for item in result_list:
  date_time = item[0]
  comment_num = item[1]
  # print(date_time)
  stripped_date_time = datetime.strptime(date_time, "%m/%d/%Y %H:%M")
  # print(stripped_date_time)
  hour = datetime.strftime(stripped_date_time, "%H")
  # print(hour)
  if hour not in counts_by_hour:
    counts_by_hour[hour] = 1
    comments_by_hour[hour] = comment_num
  else:
    counts_by_hour[hour] += 1
    comments_by_hour[hour] += comment_num
print(counts_by_hour)
print(comments_by_hour)

"""**Average Number of Comments per Ask HN Posts by Hour**"""

avg_num_comments_by_hour = []
for count in comments_by_hour:
  avg_count = round(comments_by_hour[count] / counts_by_hour[count])
  # print(comments_by_hour[count], counts_by_hour[count])
  # print(avg_count)
  avg_num_comments_by_hour.append([count, avg_count])
print(avg_num_comments_by_hour)

"""*This means an average of **13 comments** per post posted at **2am**, average of **40 comments** per post posted at **3pm**, etc.*"""

avg_hr_swap = []
for item in avg_num_comments_by_hour:
  new_hr_swap = [item[1], item[0]]
  avg_hr_swap.append(new_hr_swap)
print(avg_hr_swap)

sorted_hr_swap = sorted(avg_hr_swap, reverse=True)
print(sorted_hr_swap)

"""**Conclusion**

In conclusion, it can be deduced that posts asking the Hacker News community about a specific question are likely to have high number of comments when posted during the following periods:

1. 3pm
2. 1pm
3. 12pm
4. 5pm
5. 10am
"""